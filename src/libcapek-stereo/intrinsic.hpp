
#pragma once

// Copyright (c) 2015, Aaron Michaux
// All rights reserved.

// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:

// 1. Redistributions of source code must retain the above copyright notice, 
//    this list of conditions and the following disclaimer. 
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

// The views and conclusions contained in the software and documentation are
// those of the authors and should not be interpreted as representing official 
// policies, either expressed or implied, of the FreeBSD Project.

#include "stdinc.hpp"

void calculate_world_pts(uint nx, uint ny, double sq_size, 
                         vector<Vector2d>& world_pts);

/**
 * Runs OpenCV's corner detection function.
 *
 * Read files from 'image_list', and detects corners. Expects to find an array
 * of 'nx' * 'ny' corners in each image. (@see calibrate_intrinsic for 
 * discussion on these two parameters.) Outputs 'w' and 'h', the width and 
 * height of the images, which must be the same for all of them. Saves detected
 * corner co-ordinates in 'camera_pts'. Each element of this vector will have
 * precisely 'nx' * 'ny' points in it. 
 *
 * If 'draw_corners_and_save' is set to true, the corners are rendered onto 
 * input images, and then saved to 'out_dir'.
 */
bool find_corners(const vector<string>& image_list,
                  bool draw_corners_and_save,
                  const string& out_dir,
                  uint nx, uint ny, 
                  uint& w, uint& h,
                  vector< vector<Vector2d> >& camera_pts);

/**
 * Runs OpenCV's intrinsic calibration function -- this can be /slow/.
 * 'camera_pts' should be generated by 'find_corners', and gives a vector
 * of corner points for each input image. Those corner points should
 * be from a checker pattern of size 'nx' * 'ny', where 'nx' is the number of
 * "inside" corners in the width direciton, and 'ny' is the number of "inside"
 * corners in the height direction. (A chessboard is 7x7.)
 * 'sq_size' should be the size of the size of one square, in the units of your
 * choice. 'w' and 'h' should be the dimensions of input images.
 * 'K' and 'D' are the output intrinsic camera and distortion parameters, 
 * respectively. (We're using OpenCV's distortion model.) 'error' is the output
 * error in calibration. Return TRUE on success.
 */
bool calibrate_intrinsic(uint nx, uint ny, double sq_size,
                         const vector< vector<Vector2d> >& camera_pts,
                         uint w, uint h, 
                         Matrix3d& K, MatrixXd& D, double& error);

/**
 * Undistort 2d point 'X' by apply OpenCV's camera distortion model.
 * The point is first normalized by applying 'K' to it. Undistortion is then
 * iteratively applied, just as OpenCV does it. (Read the code.) The normalized
 * undistorted point is then scaled and translated according to the intrinsic 
 * parameters specified in 'U'.
 */
Vector2d undistort(const Matrix3d& K, // Intrinsic parameters 
                   const MatrixXd& D, // Distortion parameters
                   const Matrix3d& U, // Intrinsic parameters for output point
                   const Vector2d& X);// 2d point to "undistort"

